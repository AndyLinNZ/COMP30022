components:
  schemas:
    TeamAddition:
      properties:
        teamId:
          type: string
      required:
        - teamId
      example:
        teamId: 55555e555555ee5555e55555

    GradeNotFoundResponse:
      allOf:
        - $ref: '#/components/schemas/GenericErrorResponse'
      example:
        success: false
        error: 'Grade does not exist'

paths:
  /grade/{gradeId}:
    get:
      tags:
        - 'Grade'
      summary: 'Find grade by id.'
      parameters:
      - name: 'gradeId'
        in: 'path'
        description: 'ID of grade to return.'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Successfully found a grade.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  difficulty: E
                  gender: female
                  teams: []
                  _id: 44444d444444dd4444d44444
                  name: Joshua Dubar Grade
                  season: 33333c333333cc3333c33333
                  __v: 0
        '404':
          description: 'Grade does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeNotFoundResponse'
    delete:
      tags:
        - 'Grade'
      summary: 'Delete grade by id.'
      parameters:
      - name: 'gradeId'
        in: 'path'
        description: 'ID of grade to delete.'
        required: true
        type: 'string'
      security:
      - BearerAuth: []  
      responses:
        '204':
          description: 'Successfully deleted a grade.'
        '403':
          description: 'User is not the creator for this league.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotCreatorResponse'
        '404':
          description: 'Grade does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeNotFoundResponse'

  /grade/{gradeId}/team:
    get:
      tags:
        - 'Grade'
      summary: 'Get all teams for a grade.'
      parameters:
      - name: 'gradeId'
        in: 'path'
        description: 'ID of the grade.'
        required: true
        type: 'string'
      responses:
        '200':
          description: 'Successfully found all teams for a Grade.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  teams:
                    - 55555e555555ee5555e55555
        '404':
          description: 'Grade does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeNotFoundResponse'
    post:
      tags:
        - 'Grade'
      summary: 'Add a team to a grade.'
      description: 'This can only be done by a logged in user and a league admin.'
      parameters:
      - name: 'gradeId'
        in: 'path'
        description: 'ID of the grade.'
        required: true
        type: 'string'
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamAddition'
      responses:
        '200':
          description: 'Successfully added a team to a grade.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  difficulty: E
                  gender: female
                  teams: [55555e555555ee5555e55555]
                  _id: 44444d444444dd4444d44444
                  name: Joshua Dubar Grade
                  season: 33333c333333cc3333c33333
                  __v: 0
        '400':
          description: 'Team already exists in a grade for the season.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'
              example:
                success: false
                error: 'Team already exists in a grade for the season'
        '404':
          description: 'Team does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamNotFoundResponse'
        '403':
          description: 'User is not an admin for this team.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotTeamAdminResponse'

  /grade/{gradeId}/round:
    post:
      tags:
        - 'Grade'
      summary: 'Create a new round in a grade.'
      description: 'This can only be done by a logged in user and a league admin.'
      parameters:
      - name: 'gradeId'
        in: 'path'
        description: 'ID of the grade.'
        required: true
        type: 'string'
      security:
      - BearerAuth: []
      responses:
        '201':
          description: 'Successfully created a new round.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                success: true
                data:
                  _id: 613c39999910f3519e888821
                  grade: 613c32222222222193333331
                  games: []

        '404':
          description: 'Grade does not exist.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeNotFoundResponse'